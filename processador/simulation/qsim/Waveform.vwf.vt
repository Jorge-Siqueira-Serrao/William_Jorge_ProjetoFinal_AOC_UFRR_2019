// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2019 07:33:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sonic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sonic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_sonic;
// wires                                               
wire [3:0] out_op_code_sonic;
wire [7:0] out_out_pc;
wire [7:0] out_out_somador_pc;
wire [1:0] out_reg1;
wire [1:0] out_reg2;
wire [7:0] out_rom_value;
wire [7:0] out_ula_sonic;

// assign statements (if any)                          
sonic i1 (
// port map - connection between master ports and signals/registers   
	.clock_sonic(clock_sonic),
	.out_op_code_sonic(out_op_code_sonic),
	.out_out_pc(out_out_pc),
	.out_out_somador_pc(out_out_somador_pc),
	.out_reg1(out_reg1),
	.out_reg2(out_reg2),
	.out_rom_value(out_rom_value),
	.out_ula_sonic(out_ula_sonic)
);
initial 
begin 
#1000000 $finish;
end 

// clock_sonic
always
begin
	clock_sonic = 1'b0;
	clock_sonic = #5000 1'b1;
	#5000;
end 
endmodule

